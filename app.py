import streamlit as st
import fitz  # PyMuPDF
import tempfile
import os
import base64
import google.generativeai as genai
from gtts import gTTS
from langdetect import detect, LangDetectException
from googletrans import Translator

# ====== PAGE CONFIGURATION ======
st.set_page_config(page_title="PDF Audio Summarizer", layout="wide")

# ====== STYLE ======
st.markdown("""
<style>
    .step-box { background: #e7f5ff; padding: 1rem; border-radius: 12px;
                margin: 10px 0; border-left: 6px solid #3b82f6;
                font-size: 1.1rem; font-weight: 500; color: #0c4a6e; }
    .header-text { font-weight: 700; font-size: 2rem; color: #1e293b; }
    .subheader-text { font-weight: 600; color: #475569; margin-bottom: 1.5rem; }
    .footer-text { color: #94a3b8; font-size: 0.9rem; margin-top: 3rem; text-align: center; }
</style>
""", unsafe_allow_html=True)

# ====== SIDEBAR ======
with st.sidebar:
    st.header("Gemini API Settings")
    api_key = st.text_input("Enter your Gemini API key:", type="password")

    st.markdown("---")
    st.header("Language Options")
    auto_lang = st.checkbox("Auto-detect language from PDF", value=True)

    LANGUAGES = {
        "English": "en", "Hindi": "hi", "Spanish": "es", "French": "fr", "German": "de",
        "Italian": "it", "Portuguese": "pt", "Russian": "ru", "Chinese (Mandarin)": "zh-CN",
        "Japanese": "ja", "Korean": "ko", "Arabic": "ar", "Turkish": "tr", "Bengali": "bn",
        "Tamil": "ta", "Telugu": "te", "Gujarati": "gu", "Malayalam": "ml", "Urdu": "ur",
        "Indonesian": "id", "Vietnamese": "vi", "Polish": "pl", "Dutch": "nl", "Swedish": "sv"
    }

    chosen_lang = st.selectbox("Select language (if not auto-detecting):", list(LANGUAGES.keys()))
    lang_code = LANGUAGES[chosen_lang]

    st.markdown("---")
    audio_format = st.selectbox("Choose audio format:", ["mp3", "ogg", "wav"])
    st.markdown("<small>Updated on April 2025</small>", unsafe_allow_html=True)

# ====== FUNCTIONS ======
def extract_text_from_pdf(uploaded_pdf):
    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
        tmp.write(uploaded_pdf.read())
        tmp_path = tmp.name
    text = ""
    with fitz.open(tmp_path) as doc:
        for page in doc:
            text += page.get_text()
        page_count = len(doc)
    os.remove(tmp_path)
    return text.strip(), page_count

def chunk_text(text, max_tokens=1500):
    words = text.split()
    return [' '.join(words[i:i + max_tokens]) for i in range(0, len(words), max_tokens)]

def generate_ai_summary(text, key):
    genai.configure(api_key=key)
    model = genai.GenerativeModel("gemini-2.0-flash")
    chunks = chunk_text(text)
    summaries = [model.generate_content(f"Summarize this in a friendly voiceover style:\n{c}").text for c in chunks]
    return "\n\n".join(summaries)

def text_to_speech(text, language, filename):
    tts = gTTS(text=text, lang=language)
    tts.save(filename)
    return filename

def create_audio_download_link(audio_file):
    with open(audio_file, "rb") as f:
        data = f.read()
    b64 = base64.b64encode(data).decode()
    return f'<a href="data:audio/{audio_format};base64,{b64}" download="summary.{audio_format}">Download Audio</a>'

def estimate_audio_duration(word_count):
    wpm = 130
    minutes = word_count / wpm
    return f"{int(minutes)} min {int((minutes % 1) * 60)} sec"

# ====== MAIN UI ======
st.markdown('<p class="header-text">PDF to Audio Summary</p>', unsafe_allow_html=True)
st.markdown('<p class="subheader-text">Upload a PDF and get a spoken summary generated by AI.</p>', unsafe_allow_html=True)

uploaded_pdf = st.file_uploader("Upload your PDF file", type=["pdf"])

if uploaded_pdf:
    st.info(f"üìÑ File selected: **{uploaded_pdf.name}**")
    if st.button("Generate Audio Overview"):
        if not api_key:
            st.error("‚ö†Ô∏è Please enter your Gemini API key in the sidebar.")
        else:
            with st.spinner("Extracting text from PDF..."):
                pdf_text, total_pages = extract_text_from_pdf(uploaded_pdf)
            word_count = len(pdf_text.split())
            st.markdown(f'<div class="step-box">Extracted <b>{word_count}</b> words from <b>{total_pages}</b> pages.</div>', unsafe_allow_html=True)

            if auto_lang:
                try:
                    detected_lang = detect(pdf_text)
                    st.markdown(f'<div class="step-box">Detected language: <b>{detected_lang.upper()}</b></div>', unsafe_allow_html=True)
                except LangDetectException:
                    detected_lang = lang_code
                    st.warning("Failed to detect language, using selected option.")
            else:
                detected_lang = lang_code

            with st.spinner("Generating AI summary..."):
                try:
                    summary = generate_ai_summary(pdf_text, api_key)
                except Exception as e:
                    st.error(f"Summary generation failed: {e}")
                    st.stop()

            st.markdown('<div class="step-box">AI Summary generated successfully.</div>', unsafe_allow_html=True)
            st.subheader("Summary")
            st.write(summary)
            duration = estimate_audio_duration(len(summary.split()))
            st.caption(f"Estimated audio length: {duration}")

            with st.spinner("Converting to speech..."):
                audio_filename = f"summary.{audio_format}"
                audio_file = text_to_speech(summary, detected_lang, audio_filename)

            st.markdown('<div class="step-box">Audio conversion completed!</div>', unsafe_allow_html=True)
            st.success("‚úÖ Done!")

            st.audio(audio_file, format=f"audio/{audio_format}")
            download_link = create_audio_download_link(audio_file)
            st.markdown(download_link, unsafe_allow_html=True)

            try:
                os.remove(audio_file)
            except Exception:
                pass

st.markdown('<p class="footer-text">¬© v1.2.0</p>', unsafe_allow_html=True)
